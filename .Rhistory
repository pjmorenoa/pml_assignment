plot(cars)
pkgs <- c("data.table","caret","randomForest","foreach","rpart",
"rpart.plot","corrplot")
pkgs
install.packages(pkgs)
install.packages(c("boot", "evaluate", "formatR", "ggplot2", "gtable", "knitr", "lme4", "Matrix", "mgcv", "munsell", "nlme", "nnet", "pbkrtest", "quantreg", "R6", "RcppEigen", "rmarkdown", "scales"))
install.packages("dplyr")
install.packages("plyr")
pkgs <- c("data.table", "dplyr","caret","randomForest",
"foreach","rpart","rpart.plot","corrplot")
sapply(pkgs, require, character.only=TRUE)
m <- matrix(300,145)
m
dim(n)
dim(m)
dim(m)[0]
dim(m)[1]
dim(m)[2]
dim(m)[3]
training <- read.csv(trname, header=TRUE, na.strings=c("#DIV/0!"," ", "", "NA", "NAs", "NULL"))
downloadFile <- function(URL="", destFile=""){
if(!file.exists(destFile)){
download.file(URL, destFile)
}else{
message("File is downloaded.")
}
}
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trname <- "pml-training.csv"
testURL <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
tsname <- "pml-testing.csv"
downloadFile(trainURL, trname)
downloadFile(testURL, tsname)
# Some NA values in the datasets are represented with "#DIV/0!"," ", "", "NA", "NAs", "NULL", we are going to read all of them to "NA".
training <- read.csv(trname, header=TRUE, na.strings=c("#DIV/0!"," ", "", "NA", "NAs", "NULL"))
testing <- read.csv(tsname, header=TRUE, na.strings=c("#DIV/0!"," ", "", "NA", "NAs", "NULL"))
rm(m)
tr2 <- training[, -which(names(training) %in% c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window"))]
tr2 = tr2[, colSums(is.na(tr2)) == 0]
is.na(tr2)
nzerovar = nearZeroVar(tr2[sapply(tr2, is.numeric)], saveMetrics=TRUE)
tr2 = tr2[, nzerovar[, 'nzv'] == 0]
# Removing near zero variance predictors.
cmtx <- cor(na.omit(tr2[sapply(tr2, is.numeric)]))
dim(cmtx)
cmtx_df <- expand.grid(row = 1:dim(cmtx)[1], col = 1:dim(cmtx)[2])
tr2 = tr2[, colSums(is.na(tr2)) == 0]
cmtx_df
cmtx_df$correlation <- as.vector(cmtx)
cmtx_df
head(cmtx_df)
tr2[colSums(is.na(tr2))
]
str(tr2)
nzerovar = nearZeroVar(tr2[sapply(tr2, is.numeric)], saveMetrics=TRUE)
tr2 = tr2[, nzerovar[, 'nzv'] == 0]
# Removing near zero variance predictors.
cmtx <- cor(na.omit(tr2[sapply(tr2, is.numeric)]))
dim(cmtx)
cmtx_df <- expand.grid(row = 1:dim(cmtx)[1], col = 1:dim(cmtx)[2])
cmtx_df$correlation <- as.vector(cmtx)
# This returns the correlation matrix in matrix format
rem <- findCorrelation(cmtx, cutoff = .7, verbose = TRUE)
tr2 <- tr2[, -rem]
str(tr2)
for(i in c(2:ncol(tr2)-1)) {
tr2[,i] = as.numeric(as.character(tr2[,i]))
}
colSums(is.na(tr2))
nzerovar = nearZeroVar(tr2[sapply(tr2, is.numeric)], saveMetrics=TRUE)
tr2 = tr2[, nzerovar[, 'nzv'] == 0]
str(tr2)
install.packages("e1071")
result <- predict(modelLda, mtraining[, -length(names(mtraining))])
install.packages("doSNOW")
install.packages("snow")
install.packages("doMC")
install.packages("doParallel")
registerDoParallel(cores=4)
library(doParallel)
registerDoParallel(cores=4)
install.packages("gbm")
install.packages("elm")
install.packages("elmNN")
install.packages("nnet")
install.packages("ada")
install.packages("xtable")
answers
answers <- predict(modelTr, testing)
c
"xtable"
```{r cache=TRUE}
View(cmtx)
View(cmtx)
View(tr2)
x <- createDataPartition(tr2$classe, p=0.6, list=FALSE)
mtraining <- tr2[x,]
mtesting <- tr2[-x,]
rbind("Original dataset" = dim(tr2),"Training set" = dim(mtraining), "Testing set" = dim(mtraining))
library(caret)
x <- createDataPartition(tr2$classe, p=0.6, list=FALSE)
mtraining <- tr2[x,]
mtesting <- tr2[-x,]
rbind("Original dataset" = dim(tr2),"Training set" = dim(mtraining), "Testing set" = dim(mtraining))
x <- createDataPartition(tr2$classe, p=0.7, list=FALSE)
mtraining <- tr2[x,]
mtesting <- tr2[-x,]
rbind("Original dataset" = dim(tr2),"Training set" = dim(mtraining), "Testing set" = dim(mtraining))
x <- createDataPartition(tr2$classe, p=0.6, list=FALSE)
mtraining <- tr2[x,]
mtesting <- tr2[-x,]
rbind("Original dataset" = dim(tr2),"Training set" = dim(mtraining), "Testing set" = dim(mtesting))
install.packages("rattle")
install.packages("rpart")
install.packages("rGTK2")
install.packages("rGtk2")
install.packages("RGtk2")
install.packages("mboost")
setwd("~/R/pml_assignment")
urlTra <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
urlTes <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!"pml-training.csv" %in% dir(getwd())) {
download.file(url, destfile = "pml-training.csv")
}
if (!"pml-testing.csv" %in% dir(getwd())) {
download.file(url, destfile = "pml-testing.csv")
}
urlTra <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
urlTes <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!"pml-training.csv" %in% dir(getwd())) {
download.file(url, destfile = "pml-training.csv")
}
download.file(url, destfile = "pml-training.csv")
}
if (!"pml-testing.csv" %in% dir(getwd())) {
download.file(url, destfile = "pml-testing.csv")
xcv
]}
download.file(url, destfile = "pml-training.csv")
a <- rbind("Question"=c(1:20),"Answer"=as.character(answers))
answers <- predict(modelTr, testing, predict.all=TRUE)
